use serde::{Deserialize, Serialize};
use serde_json::Value;

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Project {
    pub id: i64,
    pub description: Option<String>,
    pub name: Option<String>,
    #[serde(rename = "name_with_namespace")]
    pub name_with_namespace: Option<String>,
    pub path: Option<String>,
    #[serde(rename = "path_with_namespace")]
    pub path_with_namespace: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: Option<String>,
    #[serde(rename = "default_branch")]
    pub default_branch: Option<String>,
    #[serde(rename = "tag_list")]
    pub tag_list: Vec<Value>,
    pub topics: Vec<Value>,
    #[serde(rename = "ssh_url_to_repo")]
    pub ssh_url_to_repo: Option<String>,
    #[serde(rename = "http_url_to_repo")]
    pub http_url_to_repo: Option<String>,
    #[serde(rename = "web_url")]
    pub web_url: Option<String>,
    #[serde(rename = "readme_url")]
    pub readme_url: Option<String>,
    #[serde(rename = "forks_count")]
    pub forks_count: i64,
    #[serde(rename = "avatar_url")]
    pub avatar_url: Value,
    #[serde(rename = "star_count")]
    pub star_count: i64,
    #[serde(rename = "last_activity_at")]
    pub last_activity_at: Option<String>,
    pub namespace: Namespace,
    #[serde(rename = "container_registry_image_prefix")]
    pub container_registry_image_prefix: Option<String>,
    #[serde(rename = "_links")]
    pub links: Links,
    #[serde(rename = "packages_enabled")]
    pub packages_enabled: bool,
    #[serde(rename = "empty_repo")]
    pub empty_repo: bool,
    pub archived: bool,
    pub visibility: Option<String>,
    #[serde(rename = "resolve_outdated_diff_discussions")]
    pub resolve_outdated_diff_discussions: bool,
    #[serde(rename = "container_expiration_policy")]
    pub container_expiration_policy: ContainerExpirationPolicy,
    #[serde(rename = "repository_object_format")]
    pub repository_object_format: Option<String>,
    #[serde(rename = "issues_enabled")]
    pub issues_enabled: bool,
    #[serde(rename = "merge_requests_enabled")]
    pub merge_requests_enabled: bool,
    #[serde(rename = "wiki_enabled")]
    pub wiki_enabled: bool,
    #[serde(rename = "jobs_enabled")]
    pub jobs_enabled: bool,
    #[serde(rename = "snippets_enabled")]
    pub snippets_enabled: bool,
    #[serde(rename = "container_registry_enabled")]
    pub container_registry_enabled: bool,
    #[serde(rename = "service_desk_enabled")]
    pub service_desk_enabled: bool,
    #[serde(rename = "can_create_merge_request_in")]
    pub can_create_merge_request_in: bool,
    #[serde(rename = "issues_access_level")]
    pub issues_access_level: Option<String>,
    #[serde(rename = "repository_access_level")]
    pub repository_access_level: Option<String>,
    #[serde(rename = "merge_requests_access_level")]
    pub merge_requests_access_level: Option<String>,
    #[serde(rename = "forking_access_level")]
    pub forking_access_level: Option<String>,
    #[serde(rename = "wiki_access_level")]
    pub wiki_access_level: Option<String>,
    #[serde(rename = "builds_access_level")]
    pub builds_access_level: Option<String>,
    #[serde(rename = "snippets_access_level")]
    pub snippets_access_level: Option<String>,
    #[serde(rename = "pages_access_level")]
    pub pages_access_level: Option<String>,
    #[serde(rename = "analytics_access_level")]
    pub analytics_access_level: Option<String>,
    #[serde(rename = "container_registry_access_level")]
    pub container_registry_access_level: Option<String>,
    #[serde(rename = "security_and_compliance_access_level")]
    pub security_and_compliance_access_level: Option<String>,
    #[serde(rename = "releases_access_level")]
    pub releases_access_level: Option<String>,
    #[serde(rename = "environments_access_level")]
    pub environments_access_level: Option<String>,
    #[serde(rename = "feature_flags_access_level")]
    pub feature_flags_access_level: Option<String>,
    #[serde(rename = "infrastructure_access_level")]
    pub infrastructure_access_level: Option<String>,
    #[serde(rename = "monitor_access_level")]
    pub monitor_access_level: Option<String>,
    #[serde(rename = "model_experiments_access_level")]
    pub model_experiments_access_level: Option<String>,
    #[serde(rename = "model_registry_access_level")]
    pub model_registry_access_level: Option<String>,
    #[serde(rename = "emails_disabled")]
    pub emails_disabled: bool,
    #[serde(rename = "emails_enabled")]
    pub emails_enabled: bool,
    #[serde(rename = "shared_runners_enabled")]
    pub shared_runners_enabled: bool,
    #[serde(rename = "lfs_enabled")]
    pub lfs_enabled: bool,
    #[serde(rename = "creator_id")]
    pub creator_id: i64,
    #[serde(rename = "import_status")]
    pub import_status: Option<String>,
    #[serde(rename = "description_html")]
    pub description_html: Option<String>,
    #[serde(rename = "updated_at")]
    pub updated_at: Option<String>,
    #[serde(rename = "ci_config_path")]
    pub ci_config_path: Option<String>,
    #[serde(rename = "public_jobs")]
    pub public_jobs: bool,
    #[serde(rename = "shared_with_groups")]
    pub shared_with_groups: Vec<Value>,
    #[serde(rename = "only_allow_merge_if_pipeline_succeeds")]
    pub only_allow_merge_if_pipeline_succeeds: bool,
    #[serde(rename = "allow_merge_on_skipped_pipeline")]
    pub allow_merge_on_skipped_pipeline: Option<bool>,
    #[serde(rename = "request_access_enabled")]
    pub request_access_enabled: bool,
    #[serde(rename = "only_allow_merge_if_all_discussions_are_resolved")]
    pub only_allow_merge_if_all_discussions_are_resolved: bool,
    #[serde(rename = "remove_source_branch_after_merge")]
    pub remove_source_branch_after_merge: bool,
    #[serde(rename = "printing_merge_request_link_enabled")]
    pub printing_merge_request_link_enabled: bool,
    #[serde(rename = "merge_method")]
    pub merge_method: Option<String>,
    #[serde(rename = "squash_option")]
    pub squash_option: Option<String>,
    #[serde(rename = "enforce_auth_checks_on_uploads")]
    pub enforce_auth_checks_on_uploads: bool,
    #[serde(rename = "suggestion_commit_message")]
    pub suggestion_commit_message: Value,
    #[serde(rename = "merge_commit_template")]
    pub merge_commit_template: Value,
    #[serde(rename = "squash_commit_template")]
    pub squash_commit_template: Value,
    #[serde(rename = "issue_branch_template")]
    pub issue_branch_template: Value,
    #[serde(rename = "warn_about_potentially_unwanted_characters")]
    pub warn_about_potentially_unwanted_characters: bool,
    #[serde(rename = "autoclose_referenced_issues")]
    pub autoclose_referenced_issues: bool,
    #[serde(rename = "max_artifacts_size")]
    pub max_artifacts_size: Value,
    #[serde(rename = "approvals_before_merge")]
    pub approvals_before_merge: Option<i64>,
    pub mirror: Option<bool>,
    #[serde(rename = "external_authorization_classification_label")]
    pub external_authorization_classification_label: Option<String>,
    #[serde(rename = "marked_for_deletion_at")]
    pub marked_for_deletion_at: Option<Value>,
    #[serde(rename = "marked_for_deletion_on")]
    pub marked_for_deletion_on: Option<Value>,
    #[serde(rename = "requirements_enabled")]
    pub requirements_enabled: bool,
    #[serde(rename = "requirements_access_level")]
    pub requirements_access_level: Option<String>,
    #[serde(rename = "security_and_compliance_enabled")]
    pub security_and_compliance_enabled: bool,
    #[serde(rename = "compliance_frameworks")]
    pub compliance_frameworks: Vec<Value>,
    #[serde(rename = "merge_pipelines_enabled")]
    pub merge_pipelines_enabled: Option<bool>,
    #[serde(rename = "merge_trains_enabled")]
    pub merge_trains_enabled: Option<bool>,
    #[serde(rename = "merge_trains_skip_train_allowed")]
    pub merge_trains_skip_train_allowed: Option<bool>,
    #[serde(rename = "only_allow_merge_if_all_status_checks_passed")]
    pub only_allow_merge_if_all_status_checks_passed: Option<bool>,
    #[serde(rename = "allow_pipeline_trigger_approve_deployment")]
    pub allow_pipeline_trigger_approve_deployment: Option<bool>,
    #[serde(rename = "prevent_merge_without_jira_issue")]
    pub prevent_merge_without_jira_issue: Option<bool>,
    pub permissions: Permissions,
    #[serde(rename = "open_issues_count")]
    pub open_issues_count: Option<i64>,
    pub owner: Option<Owner>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Namespace {
    pub id: i64,
    pub name: Option<String>,
    pub path: Option<String>,
    pub kind: Option<String>,
    #[serde(rename = "full_path")]
    pub full_path: Option<String>,
    #[serde(rename = "parent_id")]
    pub parent_id: Option<i64>,
    #[serde(rename = "avatar_url")]
    pub avatar_url: Option<String>,
    #[serde(rename = "web_url")]
    pub web_url: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Links {
    #[serde(rename = "self")]
    pub self_field: Option<String>,
    #[serde(rename = "repo_branches")]
    pub repo_branches: Option<String>,
    pub labels: Option<String>,
    pub events: Option<String>,
    pub members: Option<String>,
    #[serde(rename = "cluster_agents")]
    pub cluster_agents: Option<String>,
    pub issues: Option<String>,
    #[serde(rename = "merge_requests")]
    pub merge_requests: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ContainerExpirationPolicy {
    pub cadence: Option<String>,
    pub enabled: bool,
    #[serde(rename = "keep_n")]
    pub keep_n: i64,
    #[serde(rename = "older_than")]
    pub older_than: Option<String>,
    #[serde(rename = "name_regex")]
    pub name_regex: Option<String>,
    #[serde(rename = "name_regex_keep")]
    pub name_regex_keep: Value,
    #[serde(rename = "next_run_at")]
    pub next_run_at: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Permissions {
    #[serde(rename = "project_access")]
    pub project_access: Value,
    #[serde(rename = "group_access")]
    pub group_access: Value,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Owner {
    pub id: i64,
    pub username: Option<String>,
    pub name: Option<String>,
    pub state: Option<String>,
    pub locked: bool,
    #[serde(rename = "avatar_url")]
    pub avatar_url: Option<String>,
    #[serde(rename = "web_url")]
    pub web_url: Option<String>,
}
